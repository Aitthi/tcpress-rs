pub enum HttpStatusCode {
    Ok = 200,
    Created = 201,
    Accepted = 202,
    NoContent = 204,
    MovedPermanently = 301,
    Found = 302,
    NotModified = 304,
    BadRequest = 400,
    Unauthorized = 401,
    Forbidden = 403,
    NotFound = 404,
    MethodNotAllowed = 405,
    NotAcceptable = 406,
    RequestTimeout = 408,
    Conflict = 409,
    Gone = 410,
    LengthRequired = 411,
    PreconditionFailed = 412,
    PayloadTooLarge = 413,
    URITooLong = 414,
    UnsupportedMediaType = 415,
    RangeNotSatisfiable = 416,
    ExpectationFailed = 417,
    ImATeapot = 418,
    UnprocessableEntity = 422,
    UpgradeRequired = 426,
    PreconditionRequired = 428,
    TooManyRequests = 429,
    RequestHeaderFieldsTooLarge = 431,
    UnavailableForLegalReasons = 451,
    InternalServerError = 500,
    NotImplemented = 501,
    BadGateway = 502,
    ServiceUnavailable = 503,
    GatewayTimeout = 504,
    HTTPVersionNotSupported = 505,
    NetworkAuthenticationRequired = 511,
    Unknown = 0,
}

impl HttpStatusCode {
    pub fn to_string(&self) -> String {
        match self {
            HttpStatusCode::Ok => "OK".to_string(),
            HttpStatusCode::Created => "Created".to_string(),
            HttpStatusCode::Accepted => "Accepted".to_string(),
            HttpStatusCode::NoContent => "No Content".to_string(),
            HttpStatusCode::MovedPermanently => "Moved Permanently".to_string(),
            HttpStatusCode::Found => "Found".to_string(),
            HttpStatusCode::NotModified => "Not Modified".to_string(),
            HttpStatusCode::BadRequest => "Bad Request".to_string(),
            HttpStatusCode::Unauthorized => "Unauthorized".to_string(),
            HttpStatusCode::Forbidden => "Forbidden".to_string(),
            HttpStatusCode::NotFound => "Not Found".to_string(),
            HttpStatusCode::MethodNotAllowed => "Method Not Allowed".to_string(),
            HttpStatusCode::NotAcceptable => "Not Acceptable".to_string(),
            HttpStatusCode::RequestTimeout => "Request Timeout".to_string(),
            HttpStatusCode::Conflict => "Conflict".to_string(),
            HttpStatusCode::Gone => "Gone".to_string(),
            HttpStatusCode::LengthRequired => "Length Required".to_string(),
            HttpStatusCode::PreconditionFailed => "Precondition Failed".to_string(),
            HttpStatusCode::PayloadTooLarge => "Payload Too Large".to_string(),
            HttpStatusCode::URITooLong => "URI Too Long".to_string(),
            HttpStatusCode::UnsupportedMediaType => "Unsupported Media Type".to_string(),
            HttpStatusCode::RangeNotSatisfiable => "Range Not Satisfiable".to_string(),
            HttpStatusCode::ExpectationFailed => "Expectation Failed".to_string(),
            HttpStatusCode::ImATeapot => "I'm a teapot".to_string(),
            HttpStatusCode::UnprocessableEntity => "Unprocessable Entity".to_string(),
            HttpStatusCode::UpgradeRequired => "Upgrade Required".to_string(),
            HttpStatusCode::PreconditionRequired => "Precondition Required".to_string(),
            HttpStatusCode::TooManyRequests => "Too Many Requests".to_string(),
            HttpStatusCode::RequestHeaderFieldsTooLarge => "Request Header Fields Too Large".to_string(),
            HttpStatusCode::UnavailableForLegalReasons => "Unavailable For Legal Reasons".to_string(),
            HttpStatusCode::InternalServerError => "Internal Server Error".to_string(),
            HttpStatusCode::NotImplemented => "Not Implemented".to_string(),
            HttpStatusCode::BadGateway => "Bad Gateway".to_string(),
            HttpStatusCode::ServiceUnavailable => "Service Unavailable".to_string(),
            HttpStatusCode::GatewayTimeout => "Gateway Timeout".to_string(),
            HttpStatusCode::HTTPVersionNotSupported => "HTTP Version Not Supported".to_string(),
            HttpStatusCode::NetworkAuthenticationRequired => "Network Authentication Required".to_string(),
            HttpStatusCode::Unknown => "Unknown".to_string(),
        }
    }

    // from
    pub fn from(code: u16) -> Self {
        match code {
            200 => HttpStatusCode::Ok,
            201 => HttpStatusCode::Created,
            202 => HttpStatusCode::Accepted,
            204 => HttpStatusCode::NoContent,
            301 => HttpStatusCode::MovedPermanently,
            302 => HttpStatusCode::Found,
            304 => HttpStatusCode::NotModified,
            400 => HttpStatusCode::BadRequest,
            401 => HttpStatusCode::Unauthorized,
            403 => HttpStatusCode::Forbidden,
            404 => HttpStatusCode::NotFound,
            405 => HttpStatusCode::MethodNotAllowed,
            406 => HttpStatusCode::NotAcceptable,
            408 => HttpStatusCode::RequestTimeout,
            409 => HttpStatusCode::Conflict,
            410 => HttpStatusCode::Gone,
            411 => HttpStatusCode::LengthRequired,
            412 => HttpStatusCode::PreconditionFailed,
            413 => HttpStatusCode::PayloadTooLarge,
            414 => HttpStatusCode::URITooLong,
            415 => HttpStatusCode::UnsupportedMediaType,
            416 => HttpStatusCode::RangeNotSatisfiable,
            417 => HttpStatusCode::ExpectationFailed,
            418 => HttpStatusCode::ImATeapot,
            422 => HttpStatusCode::UnprocessableEntity,
            426 => HttpStatusCode::UpgradeRequired,
            428 => HttpStatusCode::PreconditionRequired,
            429 => HttpStatusCode::TooManyRequests,
            431 => HttpStatusCode::RequestHeaderFieldsTooLarge,
            451 => HttpStatusCode::UnavailableForLegalReasons,
            500 => HttpStatusCode::InternalServerError,
            501 => HttpStatusCode::NotImplemented,
            502 => HttpStatusCode::BadGateway,
            503 => HttpStatusCode::ServiceUnavailable,
            504 => HttpStatusCode::GatewayTimeout,
            505 => HttpStatusCode::HTTPVersionNotSupported,
            511 => HttpStatusCode::NetworkAuthenticationRequired,
            _ => HttpStatusCode::Unknown,
        }
    }

    pub fn to_u16(&self) -> u16 {
        match self {
            HttpStatusCode::Ok => 200,
            HttpStatusCode::Created => 201,
            HttpStatusCode::Accepted => 202,
            HttpStatusCode::NoContent => 204,
            HttpStatusCode::MovedPermanently => 301,
            HttpStatusCode::Found => 302,
            HttpStatusCode::NotModified => 304,
            HttpStatusCode::BadRequest => 400,
            HttpStatusCode::Unauthorized => 401,
            HttpStatusCode::Forbidden => 403,
            HttpStatusCode::NotFound => 404,
            HttpStatusCode::MethodNotAllowed => 405,
            HttpStatusCode::NotAcceptable => 406,
            HttpStatusCode::RequestTimeout => 408,
            HttpStatusCode::Conflict => 409,
            HttpStatusCode::Gone => 410,
            HttpStatusCode::LengthRequired => 411,
            HttpStatusCode::PreconditionFailed => 412,
            HttpStatusCode::PayloadTooLarge => 413,
            HttpStatusCode::URITooLong => 414,
            HttpStatusCode::UnsupportedMediaType => 415,
            HttpStatusCode::RangeNotSatisfiable => 416,
            HttpStatusCode::ExpectationFailed => 417,
            HttpStatusCode::ImATeapot => 418,
            HttpStatusCode::UnprocessableEntity => 422,
            HttpStatusCode::UpgradeRequired => 426,
            HttpStatusCode::PreconditionRequired => 428,
            HttpStatusCode::TooManyRequests => 429,
            HttpStatusCode::RequestHeaderFieldsTooLarge => 431,
            HttpStatusCode::UnavailableForLegalReasons => 451,
            HttpStatusCode::InternalServerError => 500,
            HttpStatusCode::NotImplemented => 501,
            HttpStatusCode::BadGateway => 502,
            HttpStatusCode::ServiceUnavailable => 503,
            HttpStatusCode::GatewayTimeout => 504,
            HttpStatusCode::HTTPVersionNotSupported => 505,
            HttpStatusCode::NetworkAuthenticationRequired => 511,
            HttpStatusCode::Unknown => 0,
        }
    }
}
